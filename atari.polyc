# Input variables
input float paddle_y      # Current paddle Y position
input float[2] ball_pos   # Ball position (x, y)
input float[2] ball_vel   # Ball velocity (x, y)
input float opp_paddle_y  # Opponent paddle Y position
input float score_diff    # Score difference

# Action variables
action float paddle_move  # Paddle movement (-1 to 1)

# Constants
const float paddle_height = 0.2
const float court_height = 1.0
const float max_speed = 1.0

# Environment variables
env float true_ball_dir

# State variables
var float predicted_y     # Predicted Y position where ball will intersect our paddle
var float target_y        # Target Y position for our paddle
var float last_score_diff # Last score difference
var float time_to_reach   # Time for ball to reach our paddle
var float y_pos           # Calculated Y position

# Constraints for the policy
constraints [
    paddle_move >= -1.0
    paddle_move <= 1.0
]

# Optimization goals
goals [
    max score_diff
    min abs(paddle_y - predicted_y)
]

# Auxiliary function to calculate absolute value
abs(x) {
    if x < 0 {
        return -x
    }
    return x
}

# Function to predict ball intersection with paddle
predict_intersection() {
    # If ball is moving away from us, just maintain current position
    if ball_vel[0] >= 0 {
        return paddle_y
    }
    
    # Calculate time for ball to reach paddle
    time_to_reach = -ball_pos[0] / ball_vel[0]
    
    # Calculate Y position at intersection
    y_pos = ball_pos[1] + (ball_vel[1] * time_to_reach)
    
    # Handle bounces off top and bottom walls
    # Loop until we get a valid position
    while y_pos < 0 || y_pos > court_height {
        if y_pos < 0 {
            y_pos = -y_pos
        }
        if y_pos > court_height {
            y_pos = (2 * court_height) - y_pos
        }
    }
    
    return y_pos
}

# Main policy function
main() {
    # Update last score if needed
    if score_diff != last_score_diff {
        last_score_diff = score_diff
    }
    
    # Predict where the ball will intersect our paddle
    predicted_y = predict_intersection()
    
    # Calculate target position (center paddle on ball)
    target_y = predicted_y - (paddle_height / 2)
    
    # Ensure target is within bounds
    if target_y < 0 {
        target_y = 0
    }
    if target_y > (court_height - paddle_height) {
        target_y = court_height - paddle_height
    }
    
    # Move paddle toward target
    if paddle_y > (target_y + 0.02) {
        # Move up (negative direction)
        paddle_move = -max_speed
    } else if paddle_y < (target_y - 0.02) {
        # Move down (positive direction)
        paddle_move = max_speed
    } else {
        # Stop moving
        paddle_move = 0
    }
}